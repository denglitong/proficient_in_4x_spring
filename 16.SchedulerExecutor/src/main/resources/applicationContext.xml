<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          p:driverClassName="${jdbc.classDriverName}"
          p:url="${jdbc.url}"
          p:username="${jdbc.userName}"
          p:password="${jdbc.password}"/>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <bean name="jobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"
          p:jobClass="com.denglitong.basic.MyJob"
          p:applicationContextJobDataKey="applicationContext"
          p:durability="true">
        <property name="jobDataAsMap">
            <map>
                <entry key="size" value="10"/>
            </map>
        </property>
    </bean>

    <bean id="myService" class="com.denglitong.service.MyService"/>

    <!--p:concurrent="false" 指定最终封装出的任务是否有状态
        targetMethod 不能拥有方法入参
        通过 MethodInvokingJobDetailFactoryBean 产生的 jobDetail 不能被序列化，也即不能被存储到 DB-->
    <bean id="jobDetail_1"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
          p:targetObject-ref="myService"
          p:targetMethod="doJob"
          p:concurrent="false"/>

    <!--SimpleTrigger-->
    <bean id="simpleTrigger"
          class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"
          p:jobDetail-ref="jobDetail"
          p:startDelay="1000"
          p:repeatInterval="2000"
          p:repeatCount="100">
        <property name="jobDataAsMap">
            <map>
                <entry key="count" value="10"/>
            </map>
        </property>
    </bean>

    <!--CronTrigger-->
    <bean id="cronTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="jobDetail_1"
          p:cronExpression="0/5 * * * * ?"/>

    <!--scheduler
        Quartz 的 SchedulerFactory 是标准的工厂类，不太适合在 Spring 环境下使用
        Spring 提供了 SchedulerFactoryBean，可感知 Spring 容器的生命周期，
        在 Spring 容器启动后，Scheduler 自动开始工作，在 Spring 容器关闭前，自动关闭 Scheduler
        (Spring 容器 AOP 监听事件 xxxAware)-->
    <bean id="scheduler"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!--注册 Trigger-->
        <property name="triggers">
            <list>
                <ref bean="simpleTrigger"/>
                <ref bean="cronTrigger"/>
            </list>
        </property>
        <!--注册 JobDetail-->
        <!--<property name="jobDetails">
            <list>
                <ref bean="jobDetail"/>
            </list>
        </property>-->
        <property name="schedulerContextAsMap">
            <map>
                <entry key="timeout" value="30"/>
            </map>
        </property>
        <!--<property name="configLocation" value="classpath:quartz.properties"/>-->
        <property name="autoStartup" value="true"/>
        <property name="startupDelay" value="1000"/>
        <!--当需要使用数据库来持久化任务调度数据时，可配置 dataSource;
            配置 dataSource 时强烈推荐使用一个事务管理器，否则数据表锁定可能无法工作-->
        <!--<property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>-->
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">10</prop>
                <!--<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>-->
            </props>
        </property>
    </bean>
</beans>